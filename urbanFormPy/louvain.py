import networkx as nx, numpy as np
import functools
import community
import array
import numbers
import warnings

__PASS_MAX = -1
__MIN = 0.0000001

def check_random_state(seed):
    """Turn seed into a np.random.RandomState instance.

    Parameters
    ----------
    seed : None | int | instance of RandomState
        If seed is None, return the RandomState singleton used by np.random.
        If seed is an int, return a new RandomState instance seeded with seed.
        If seed is already a RandomState instance, return it.
        Otherwise raise ValueError.

    """
    if seed is None or seed is np.random: return np.random.mtrand._rand
    if isinstance(seed, (numbers.Integral, np.integer)): return np.random.RandomState(seed)
    if isinstance(seed, np.random.RandomState): return seed
    raise ValueError("%r cannot be used to seed a numpy.random.RandomState"
                     " instance" % seed)

def partition_at_level(dendrogram, level):
    """Return the partition of the nodes at the given level

    A dendrogram is a tree and each level is a partition of the graph nodes.
    Level 0 is the first partition, which contains the smallest communities,
    and the best is len(dendrogram) - 1.
    The higher the level is, the bigger are the communities

    Parameters
    ----------
    dendrogram : list of dict
       a list of partitions, ie dictionnaries where keys of the i+1 are the
       values of the i.
    level : int
       the level which belongs to [0..len(dendrogram)-1]

    Returns
    -------
    partition : dictionnary
       A dictionary where keys are the nodes and the values are the set it
       belongs to

    Raises
    ------
    KeyError
       If the dendrogram is not well formed or the level is too high

    See Also
    --------
    best_partition which directly combines partition_at_level and
    generate_dendrogram to obtain the partition of highest modularity   
    """
    partition = dendrogram[0].copy()
    for index in range(1, level + 1):
        for node, community in partition.items():  partition[node] = dendrogram[index][community]
    return partition


def modularity(partition, graph, weight='weight'):
    """Compute the modularity of a partition of a graph

    Parameters
    ----------
    partition : dict
       the partition of the nodes, i.e a dictionary where keys are their nodes
       and values the communities
    graph : networkx.Graph
       the networkx graph which is decomposed
    weight : str, optional
        the key in graph to use as weight. Default to 'weight'


    Returns
    -------
    modularity : float
       The modularity

    Raises
    ------
    KeyError
       If the partition is not a partition of all graph nodes
    ValueError
        If the graph has no link
    TypeError
        If graph is not a networkx.Graph

    References
    ----------
    .. 1. Newman, M.E.J. & Girvan, M. Finding and evaluating community
    structure in networks. Physical Review E 69, 26113(2004).

    """
    if graph.is_directed(): raise TypeError("Bad graph type, use only non directed graph")

    within_degree = dict([])
    exp_degree = dict([])
    nr_links = graph.size(weight=weight)
    if nr_links == 0: raise ValueError("A graph without link has an undefined modularity")

    for node in graph:
        community = partition[node]
        exp_degree[community] = exp_degree.get(community, 0.) + graph.degree(node, weight=weight)
        for neighbor, attributes in graph[node].items():
            edge_weight = attributes.get(weight, 1)
            if partition[neighbor] == community:
                if neighbor == node: within[community] = within.get(community, 0.) + float(edge_weight)
                else: within[community] = within.get(community, 0.) + float(edge_weight) / 2.

    res = 0.
    for community in set(partition.values()):
        # Ai is the actual number of edges falling between a particular pair of vertices i and j is 
        A = within_degree.get(community, 0.) / nr_links
        # P_ij number of edges between i and j
        P = (exp_degree.get(community, 0.) / (2. * nr_links))** 2
        res += A-P 

    return res
    
def best_partition(graph, partition=None,  weight='weight', resolution=1., randomize=None, random_state = None, 
            barrier_field = None):
                   
    """Compute the partition of the graph nodes which maximises the modularity
    (or try..) using the Louvain heuristices

    This is the partition of highest modularity, i.e. the highest partition
    of the dendrogram generated by the Louvain algorithm.

    Parameters
    ----------
    graph : networkx.Graph
       the networkx graph which is decomposed
    partition : dict, optional
       the algorithm will start using this partition of the nodes.
       It's a dictionary where keys are their nodes and values the communities
    weight : str, optional
        the key in graph to use as weight. Default to 'weight'
    resolution :  double, optional
        Will change the size of the communities, default to 1.
        represents the time described in
        "Laplacian Dynamics and Multiscale Modular Structure in Networks",
        R. Lambiotte, J.-C. Delvenne, M. Barahona
    randomize : boolean, optional
        Will randomize the node evaluation order and the community evaluation
        order to get different partitions at each call
    random_state : int, RandomState instance or None, optional (default=None)
        If int, random_state is the seed used by the random number generator;
        If RandomState instance, random_state is the random number generator;
        If None, the random number generator is the RandomState instance used
        by `np.random`.

    Returns
    -------
    partition : dictionnary
       The partition, with communities numbered from 0 to number of communities

    Raises
    ------
    NetworkXError
       If the graph is not Eulerian.

    See Also
    --------
    generate_dendrogram to obtain all the decompositions levels

    Notes
    -----
    Uses Louvain algorithm

    References
    ----------
    .. 1. Blondel, V.D. et al. Fast unfolding of communities in
    large networks. J. Stat. Mech 10008, 1-12(2008).

    """
    dendo = generate_dendrogram(graph, partition, weight, resolution, randomize, random_state, barrier_field)
    return partition_at_level(dendo, len(dendo) - 1)


def generate_dendrogram(graph, initial_partition = None, weight='weight', resolution=1., randomize=None, random_state=None, 
        barrier_field = None):
    
    """Find communities in the graph and return the associated dendrogram

    A dendrogram is a tree and each level is a partition of the graph nodes.
    Level 0 is the first partition, which contains the smallest communities,
    and the best is len(dendrogram) - 1. The higher the level is, the bigger
    are the communities

    Parameters
    ----------
    graph : networkx.Graph
        the networkx graph which will be decomposed
    initial_partition : dict, optional
        the algorithm will start using this partition of the nodes. It's a
        dictionary where keys are their nodes and values the communities
    weight : str, optional
        the key in graph to use as weight. Default to 'weight'
    resolution :  double, optional
        Will change the size of the communities, default to 1.
        represents the time described in
        "Laplacian Dynamics and Multiscale Modular Structure in Networks",
        R. Lambiotte, J.-C. Delvenne, M. Barahona

    Returns
    -------
    dendrogram : list of dictionaries
        a list of partitions, ie dictionnaries where keys of the i+1 are the
        values of the i. and where keys of the first are the nodes of graph

    Raises
    ------
    TypeError
        If the graph is not a networkx.Graph

    See Also
    --------
    best_partition

    Notes
    -----
    Uses Louvain algorithm

    References
    ----------
    .. 1. Blondel, V.D. et al. Fast unfolding of communities in large
    networks. J. Stat. Mech 10008, 1-12(2008).

    """
    if graph.is_directed(): raise TypeError("Bad graph type, use only non directed graph")

    # Properly handle random state, eventually remove old `randomize` parameter
    # NOTE: when `randomize` is removed, delete code up to random_state = ...
    if randomize is not None:
        # If shouldn't randomize, we set a fixed seed to get determinisitc results
        if randomize is False: random_state = 0

    # We don't know what to do if both `randomize` and `random_state` are defined
    if randomize and random_state is not None:
        raise ValueError("`randomize` and `random_state` cannot be used at the same time")
    
    random_state = check_random_state(random_state)

    # special case, when there is no link
    # the best partition is everyone in its community
    if graph.number_of_edges() == 0:
        partitions = dict([])
        for i, node in enumerate(graph.nodes()): partitions[node] = i
        return [partitions]

    initial_graph = graph.copy()
    status = Status()
    status.initial_status(initial_graph, weight, initial_partition) #initial status
    status_list = list()
    _one_level(initial_graph, status, weight, resolution, random_state, barrier_field = barrier_field) 
    new_modularity = _modularity(status, resolution)
    subdivision = _renumber(status.nodes_to_communities)
    status_list.append(subdivision)
    
    current_modularity = new_modularity
    current_graph = induced_graph(subdivision, initial_graph, weight) # graph where communities are nodes
    status.initial_status(current_graph, weight)

    while True:
        _one_level(current_graph, status, weight, resolution, random_state, barrier_field = barrier_field)
        new_modularity = _modularity(status, resolution)
        if new_modularity - current_modularity < __MIN: break
        subdivision = _renumber(status.nodes_to_communities)
        status_list.append(subdivision)
        current_modularity = new_modularity
        current_graph = induced_graph(subdivision, current_graph, weight)
        status.initial_status(current_graph, weight)
    
    return status_list[:]


def induced_graph(subdivision, graph, weight="weight", barrier_field = None):
    """Produce the graph where nodes are the communities

    there is a link of weight w between communities if the sum of the weights
    of the links between their elements is w

    Parameters
    ----------
    partition : dict
       a dictionary where keys are graph nodes and values the partitions the node belongs to
    graph : networkx.Graph
        the initial graph
    weight : str, optional
        the key in graph to use as weight. Default to 'weight'

    Returns
    -------
    g : networkx.Graph
       a networkx graph where nodes are the parts

    """
    ret = nx.Graph()
    ret.add_nodes_from(subdivision.values())

    for node, other_node, data in graph.edges(data=True):
        edge_weight = data.get(weight, 1)
        community = subdivision[node]
        other_community = subdivision[other_node]
        barrier = False
        if barrier_field != None: 
            barrier = data.get(barrier_field)
        if barrier == True: continue
        original_weight = ret.get_edge_data(community, other_community, {weight: 0}).get(weight, 1)
        ret.add_edge(community, other_community, **{weight: original_weight + edge_weight})

    return ret


def _renumber(dictionary):
    """Renumber the values of the dictionary from 0 to n
    """
    count = 0
    ret = dictionary.copy()
    new_values = dict([])

    for key in dictionary.keys():
        value = dictionary[key]
        new_value = new_values.get(value, -1)
        if new_value == -1:
            new_values[value] = count
            new_value = count
            count += 1
        ret[key] = new_value

    return ret


def load_binary(data):
    """Load binary graph as used by the cpp implementation of this algorithm
    """
    data = open(data, "rb")

    reader = array.array("I")
    reader.fromfile(data, 1)
    num_nodes = reader.pop()
    reader = array.array("I")
    reader.fromfile(data, num_nodes)
    cum_deg = reader.tolist()
    num_links = reader.pop()
    reader = array.array("I")
    reader.fromfile(data, num_links)
    links = reader.tolist()
    graph = nx.Graph()
    graph.add_nodes_from(range(num_nodes))
    prec_deg = 0

    for index in range(num_nodes):
        last_deg = cum_deg[index]
        neighbors = links[prec_deg:last_deg]
        graph.add_edges_from([(index, int(neigh)) for neigh in neighbors])
        prec_deg = last_deg

    return graph


def _one_level(graph, status, weight_key, resolution, random_state, barrier_field):
    
    """Compute one level of communities  """
    
    modified = True
    nb_pass_done = 0
    current_modularity = _modularity(status, resolution)
    new_modularity = current_modularity

    while modified and nb_pass_done != __PASS_MAX:
        current_modularity = new_modularity
        modified = False
        nb_pass_done += 1

        for node in random_state.permutation(list(graph.nodes())):
            community = status.nodes_to_communities[node]
            degc_totw = status.gdegrees.get(node, 0.) / (status.total_weight * 2.)  # NOQA
            neighboring_communities = _neighboring_communities_barriers(node, graph, status, weight_key, barrier_field)
            remove_cost = - resolution * neighboring_communities.get(community,0) + (status.degrees.get(community, 0.) -
                            status.gdegrees.get(node, 0.)) * degc_totw
            _remove(node, community, neighboring_communities.get(community, 0.), status)
            best_community = community
            best_increase = 0
            
            for com, dnc in random_state.permutation(list(neighboring_communities.items())):
                increase = remove_cost + resolution * dnc - status.degrees.get(com, 0.) * degc_totw
                if increase > best_increase:
                    best_increase = increase
                    best_community = com
            _insert(node, best_community, neighboring_communities.get(best_community, 0.), status)
            if best_community != community: modified = True
                
        new_modularity = _modularity(status, resolution)
        if new_modularity - current_modularity < __MIN:break


# def _neighboring_communities(node, graph, status, weight_key):
    # """
    # Compute the communities in the neighborhood of node in the graph given
    # with the decomposition nodes_to_communities
    # """
    # weights = {}
    # for neighbor, data in graph[node].items():
        # if neighbor != node:
            # edge_weight = data.get(weight_key, 1)
            # edge_weight = data.get(weight_key, 1)
            # neighboring_communities = status.nodes_to_communities[neighbor]
            # weights[neighboring_communities] = weights.get(neighboring_communities, 0) + edge_weight

    # return weights

def _neighboring_communities_barriers(node, graph, status, weight_key, barrier_field = None):
    """
    Compute the communities in the neighborhood of node in the graph given
    with the decomposition nodes_to_communities
    """
    weights = {}
    for neighbor, data in graph[node].items():
        if neighbor != node:
            edge_weight = data.get(weight_key, 1)
            barrier = False
            if barrier_field != None: barrier = data.get(barrier_field)
            if barrier == True: continue
            neighboring_communities = status.nodes_to_communities[neighbor]
            weights[neighboring_communities] = weights.get(neighboring_communities, 0) + edge_weight

    return weights


def _remove(node, community, weight, status):
    """ Remove node from community and modify status"""
    status.degrees[community] = (status.degrees.get(community, 0.)- status.gdegrees.get(node, 0.))
    status.internals[community] = float(status.internals.get(community, 0.) -  weight - status.loops.get(node, 0.))
    status.nodes_to_communities[node] = -1

def _insert(node, community, weight, status):
    """ Insert node into community and modify status"""
    status.nodes_to_communities[node] = community
    status.degrees[community] = (status.degrees.get(community, 0.) + status.gdegrees.get(node, 0.))
    status.internals[community] = float(status.internals.get(community, 0.) +  weight + status.loops.get(node, 0.))

def _modularity(status, resolution):
    """
    Fast compute the modularity of the partition of the graph using
    status precomputed
    """
    links = float(status.total_weight)
    result = 0.
    for community in set(status.nodes_to_communities.values()):
        in_degree = status.internals.get(community, 0.)
        degree = status.degrees.get(community, 0.)
        if links > 0: result += in_degree * resolution / links -  ((degree / (2. * links)) ** 2)
    return result
 

class Status(object):
    """
    To handle several data in one struct.
    Could be replaced by named tuple, but don't want to depend on python 2.6
    """
    nodes_to_communities = {}
    total_weight = 0
    internals = {}
    degrees = {}
    gdegrees = {}

    def __init__(self):
        self.nodes_to_communities = dict([])
        self.total_weight = 0
        self.degrees = dict([])
        self.gdegrees = dict([])
        self.internals = dict([])
        self.loops = dict([])

    def __str__(self):
        return ("nodes_to_communities : " + str(self.nodes_to_communities) + " degrees : "
                + str(self.degrees) + " internals : " + str(self.internals)
                + " total_weight : " + str(self.total_weight))

    def copy(self):
        """Perform a deep copy of status"""
        new_status = Status()
        new_status.nodes_to_communities = self.nodes_to_communities.copy()
        new_status.internals = self.internals.copy()
        new_status.degrees = self.degrees.copy()
        new_status.gdegrees = self.gdegrees.copy()
        new_status.total_weight = self.total_weight

    def initial_status(self, graph, weight, part=None):
        """Initialize the status of a graph with every node in one community"""
        count = 0
        self.nodes_to_communities = dict([])
        self.total_weight = 0
        self.degrees = dict([])
        self.gdegrees = dict([])
        self.internals = dict([])
        self.total_weight = graph.size(weight=weight)
        
        if part is None:
            for node in graph.nodes():
                self.nodes_to_communities[node] = count
                deg = float(graph.degree(node, weight=weight))
                if deg < 0:
                    error = "Bad node degree ({})".format(deg)
                    raise ValueError(error)
                self.degrees[count] = deg
                self.gdegrees[node] = deg
                edge_data = graph.get_edge_data(node, node, default={weight: 0})
                self.loops[node] = float(edge_data.get(weight, 1))
                self.internals[count] = self.loops[node]
                count += 1
        else:
            for node in graph.nodes():
                community = part[node]
                self.nodes_to_communities[node] = community
                deg = float(graph.degree(node, weight=weight))
                self.degrees[community] = self.degrees.get(community, 0) + deg
                self.gdegrees[node] = deg
                inc = 0.
                for neighbor, data in graph[node].items():
                    edge_weight = data.get(weight, 1)
                    if edge_weight <= 0:
                        error = "Bad graph type ({})".format(type(graph))
                        raise ValueError(error)
                    if part[neighbor] == community:
                        if neighbor == node: inc += float(edge_weight)
                        else: inc += float(edge_weight) / 2.
                
                self.internals[community] = self.internals.get(community, 0) + inc